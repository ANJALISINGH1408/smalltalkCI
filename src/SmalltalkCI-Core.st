Object subclass: #SCIAbstractLoadSpec	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SmalltalkCI-Core'!!SCIAbstractLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/11/2016 02:55'!platforms: aPlatform	^ self subclassResponsibility! !!SCIAbstractLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/11/2016 02:41'!platforms	^ self subclassResponsibility! !!SCIAbstractLoadSpec methodsFor: 'executing' stamp: 'EatebanLorenzano 1/27/2016 14:24'!basicLoadProjectOn: aSmalltalkCI	self subclassResponsibility! !!SCIAbstractLoadSpec methodsFor: 'executing' stamp: 'EatebanLorenzano 1/27/2016 14:31'!loadProjectOn: aSmalltalkCI	self isComplete		ifFalse: [ self error: 'This spec cannot be loaded or is incomplete.' ].	self isPlatformCompatible		ifFalse: [ self error: 'This spec cannot be loaded on this platform' ].	"I do not have to check for metacello again (is installed if needed before), and 	 metacello contains filetree, then no need to check it either (in case other platforms 	 need it, it should be in platform code)."	"self dependenciesInstalled		ifFalse: [ self installDependencies ].	self dependenciesInstalled		ifFalse: [ self error: 'Dependencies could not be installed.' ]."	self basicLoadProjectOn: aSmalltalkCI! !!SCIAbstractLoadSpec methodsFor: 'testing' stamp: 'fn 1/16/2016 16:03'!testClasses	^ #()! !!SCIAbstractLoadSpec methodsFor: 'testing' stamp: 'fniep 1/10/2016 23:47'!isComplete	^ false! !!SCIAbstractLoadSpec methodsFor: 'testing' stamp: 'fn 1/16/2016 21:06'!prepareForCI	self subclassResponsibility! !!SCIAbstractLoadSpec methodsFor: 'testing' stamp: 'EatebanLorenzano 1/27/2016 13:55'!isPlatformCompatible	"If no platform is specified, we assume is valid for current execution platform"	^ self platforms isEmptyOrNil 		or: [ self platforms includes: SmalltalkCI platformClass platformSymbol ]! !SCIAbstractLoadSpec subclass: #SCIMetacelloLoadSpec	instanceVariableNames: 'baseline configuration directory load platforms repository originalAuthor'	classVariableNames: ''	poolDictionaries: ''	category: 'SmalltalkCI-Core'!!SCIMetacelloLoadSpec methodsFor: 'testing' stamp: 'EatebanLorenzano 1/27/2016 13:55'!isComplete	(self baseline isNil and: [ self configuration isNil ])		ifTrue: [ ^ false ].	^ true! !!SCIMetacelloLoadSpec methodsFor: 'private' stamp: 'fn 1/16/2016 16:27'!getTestClassesForMetacelloProjectRegistration: aClassName	Smalltalk at: #'MetacelloProjectRegistration' ifPresent: [ :mpr |		^ (mpr registrationForClassNamed: aClassName				ifAbsent: [ self error: aClassName printString , ' not registered (loaded)' ])			currentlyLoadedClassesInProject select: [ :cl | cl inheritsFrom: TestCase ] ].	^ #()! !!SCIMetacelloLoadSpec methodsFor: 'executing' stamp: 'EatebanLorenzano 1/27/2016 14:25'!basicLoadProjectOn: aSmalltalkCI	aSmalltalkCI loadMetacelloProject: self! !!SCIMetacelloLoadSpec methodsFor: 'executing' stamp: 'fn 1/16/2016 21:09'!prepareForCI	(Smalltalk at: #MetacelloPlatform) current authorName: 'travisCI'.! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/10/2016 18:27'!load	^ load ifNil: [ load := #() ]! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:46'!load: required	load := required! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!baseline	^ baseline! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!baseline: aBaseline	baseline := aBaseline! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/10/2016 17:54'!directory: aDirectory	directory := aDirectory! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!repository	^ repository! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!repository: aRepository	repository := aRepository! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/16/2016 16:07'!testClasses	self baseline ifNotNil: [ :b |		^ self getTestClassesForMetacelloProjectRegistration: b ].	self category ifNotNil: [ :c |		^ self getTestClassesForMetacelloProjectRegistration: c ].	^ #()! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!configuration: aConfiguration	configuration := aConfiguration! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/11/2016 02:39'!platforms	^ platforms ifNil: [ platforms := OrderedCollection new ]! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:45'!configuration	^ configuration! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/10/2016 17:54'!directory	^ directory! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/11/2016 02:39'!platforms: platformCollection	platforms := platformCollection! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SCIMetacelloLoadSpec class	instanceVariableNames: ''!!SCIMetacelloLoadSpec class methodsFor: 'as yet unclassified' stamp: 'fn 1/19/2016 17:52'!alias	^ #Metacello! !Object subclass: #SmalltalkCI	instanceVariableNames: 'spec projectDirectory'	classVariableNames: ''	poolDictionaries: ''	category: 'SmalltalkCI-Core'!!SmalltalkCI methodsFor: 'private executing' stamp: 'EatebanLorenzano 1/27/2016 14:23'!metacelloLoadRepositoryFor: aLoadSpec	^ aLoadSpec repository		ifNil: [ 'filetree://', self projectDirectory, '/', aLoadSpec directory ]! !!SmalltalkCI methodsFor: 'private executing' stamp: 'EatebanLorenzano 1/27/2016 14:25'!loadMetacelloProject: aLoadSpec	(Smalltalk at: #Metacello) new		repository: (self metacelloLoadRepositoryFor: aLoadSpec);		baseline: aLoadSpec baseline;		configuration: aLoadSpec configuration;		load: aLoadSpec load.! !!SmalltalkCI methodsFor: 'executing' stamp: 'EatebanLorenzano 1/27/2016 14:02'!runCI	self prepareForCI.	self loadProjects.	self runTests! !!SmalltalkCI methodsFor: 'executing' stamp: 'EatebanLorenzano 1/27/2016 14:02'!runTests	self subclassResponsibility! !!SmalltalkCI methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 17:07'!prepareForCI	self compatibleSpecs do: [ :each | each prepareForCI ]	! !!SmalltalkCI methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 17:02'!finishUpAfterCI! !!SmalltalkCI methodsFor: 'executing' stamp: 'EatebanLorenzano 1/27/2016 14:31'!loadProjects	"Install all specs for the current platform"	self compatibleSpecs 		do: [ :each | each loadProjectOn: self ]! !!SmalltalkCI methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 16:24'!runCIFor: aFilename	self requireSTON.	self readSTONSpec: aFilename.	self runCI.! !!SmalltalkCI methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 16:20'!projectDirectory	^ projectDirectory! !!SmalltalkCI methodsFor: 'accessing' stamp: 'travisCI 1/27/2016 16:27'!classesToTest	| classes  |		((spec testing includesKey: #categories) 		or: [ spec testing includesKey: #classes ])		ifTrue: [ ^ self classesToTestFrom: spec testing ].	classes := Set new.	self compatibleSpecs 		do: [ :each | classes addAll: each testClasses ].		spec testing 		at: #include 		ifPresent: [ :includeDict |			classes addAll: (self classesToTestFrom: includeDict) ].		spec testing 		at: #exclude 		ifPresent: [ :excludeDict |			classes removeAll: (self classesToTestFrom: excludeDict) ].		^ classes! !!SmalltalkCI methodsFor: 'accessing' stamp: 'travisCI 1/27/2016 16:27'!classesToTestFrom: aDictionary	| classes |	classes := Set new.		aDictionary 		at: #classes 		ifPresent: [ :classList |			classList do: [ :eachClass |				Smalltalk at: eachClass ifPresent: [ :class | classes add: class ] ] ].		aDictionary 		at: #categories 		ifPresent: [ :categoryList |			categoryList do: [ :eachCategory |				(eachCategory last = $*)					ifTrue: [ classes addAll: (self classesInCategoryPrefix: eachCategory allButLast) ]					ifFalse: [ classes addAll: (self classesInCategory: eachCategory) ] ] ].	^ classes		! !!SmalltalkCI methodsFor: 'accessing' stamp: 'EatebanLorenzano 1/27/2016 13:53'!compatibleSpecs 	^ spec loading select: [ :each | each isPlatformCompatible ]! !!SmalltalkCI methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 16:20'!spec	^ spec! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 15:58'!isSTONInstalled 	^ Smalltalk includesKey: #STON! !!SmalltalkCI methodsFor: 'private' stamp: 'EatebanLorenzano 1/27/2016 14:06'!installMetacello	^ self subclassResponsibility! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 15:58'!requireSTON	self isSTONInstalled ifTrue: [ ^ self ].    		self installSTON.	self isSTONInstalled 		ifFalse: [ self error: 'STON could not be loaded.' ]! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 15:58'!installSTON	^ self subclassResponsibility! !!SmalltalkCI methodsFor: 'private' stamp: 'EatebanLorenzano 1/27/2016 14:05'!requireMetacello	self isMetacelloInstalled ifTrue: [ ^ self ].    		self installMetacello.	self isMetacelloInstalled 		ifFalse: [ self error: 'Metacelo could not be loaded.' ]! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 16:05'!installDependencies	^ self subclassResponsibility! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 16:15'!readSTONSpec: aFilename	^ self subclassResponsibility! !!SmalltalkCI methodsFor: 'private' stamp: 'EatebanLorenzano 1/27/2016 14:06'!isMetacelloInstalled 	^ Smalltalk includesKey: #Metacello! !!SmalltalkCI methodsFor: 'private helpers' stamp: 'EatebanLorenzano 1/27/2016 13:06'!classesInCategoryPrefix: aCategoryPrefix	| classes |	classes := Set new.	(Smalltalk organization categories		select: [ :category | category beginsWith: aCategoryPrefix ])			do: [ :category |				classes addAll: (self classesInCategory: category) ].	^ classes! !!SmalltalkCI methodsFor: 'private helpers' stamp: 'EatebanLorenzano 1/27/2016 13:06'!classesInCategory: aCategory	^ (Smalltalk organization listAtCategoryNamed: aCategory) collect: [ :className | Smalltalk at: className ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmalltalkCI class	instanceVariableNames: 'platformClass'!!SmalltalkCI class methodsFor: 'instance creation' stamp: 'travisCI 1/27/2016 17:10'!new	self error: 'Use #runCIFor:'! !!SmalltalkCI class methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 17:36'!runCIFor: aFilenameString	^ self platformClass basicNew 		initialize;		runCIFor: aFilenameString! !!SmalltalkCI class methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 17:36'!platformSymbol	^ self subclassResponsibility! !!SmalltalkCI class methodsFor: 'accessing' stamp: 'travisCI 1/27/2016 17:09'!platformClass	"There will be just one subclass installed (for each platform)"	^ platformClass ifNil: [ self allSubclasses anyOne ]! !!SmalltalkCI class methodsFor: 'private' stamp: 'travisCI 1/27/2016 17:10'!platformClass: aClass	"This is used for testing."	platformClass := aClass! !!SmalltalkCI class methodsFor: 'private helpers' stamp: 'travisCI 1/27/2016 17:03'!isHeadless	^ self subclassResponsibility ! !Object subclass: #SmalltalkCISpec	instanceVariableNames: 'loading testing originalAuthor'	classVariableNames: ''	poolDictionaries: ''	category: 'SmalltalkCI-Core'!!SmalltalkCISpec methodsFor: 'accessing' stamp: 'fn 1/19/2016 18:19'!loading: loadSpecifications	loading := loadSpecifications! !!SmalltalkCISpec methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 17:41'!addLoadSpec: aLoadSpec	aLoadSpec isComplete ifTrue: [ self loading add: aLoadSpec ]! !!SmalltalkCISpec methodsFor: 'accessing' stamp: 'fniep 1/12/2016 22:15'!testing	^ testing ifNil: [ testing := Dictionary new ]! !!SmalltalkCISpec methodsFor: 'accessing' stamp: 'fniep 1/12/2016 22:15'!testing: aDictionary	testing := aDictionary! !!SmalltalkCISpec methodsFor: 'accessing' stamp: 'fn 1/19/2016 18:24'!loading	^ loading ifNil: [ loading := OrderedCollection new ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmalltalkCISpec class	instanceVariableNames: ''!!SmalltalkCISpec class methodsFor: 'instance creation' stamp: 'EstebanLorenzano 1/26/2016 16:20'!fromStream: aStream	^ STON fromStream: aStream  	! !