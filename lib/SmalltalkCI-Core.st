Object subclass: #SCIAbstractLoadSpec	instanceVariableNames: 'projectDirectory'	classVariableNames: ''	poolDictionaries: ''	category: 'SmalltalkCI-Core'!!SCIAbstractLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/11/2016 02:55'!platforms: aPlatform	^ self subclassResponsibility! !!SCIAbstractLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/10/2016 17:32'!projectDirectory	^ projectDirectory! !!SCIAbstractLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/10/2016 17:32'!projectDirectory: aDirectory	projectDirectory := aDirectory! !!SCIAbstractLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/11/2016 02:41'!platforms	^ self subclassResponsibility! !!SCIAbstractLoadSpec methodsFor: 'loading' stamp: 'fniep 1/11/2016 02:46'!loadProject: aDirectory	self projectDirectory: aDirectory.	self isComplete		ifFalse: [ self error: 'This spec cannot be loaded or is incomplete.' ].	self isPlatformCompatible		ifFalse: [ self error: 'This spec cannot be loaded on this platform' ].	self dependenciesInstalled		ifFalse: [ self installDependencies ].	self dependenciesInstalled		ifFalse: [ self error: 'Dependencies could not be installed.' ].	self execute! !!SCIAbstractLoadSpec methodsFor: 'loading' stamp: 'fniep 1/10/2016 23:47'!execute	self isComplete ifFalse: [ self error: 'This spec cannot be loaded or is incomplete.' ]! !!SCIAbstractLoadSpec methodsFor: 'installing' stamp: 'fn 1/10/2016 11:52'!installDependencies	^ self subclassReponsibility! !!SCIAbstractLoadSpec methodsFor: 'installing' stamp: 'fn 1/10/2016 11:53'!dependenciesInstalled	^ self subclassReponsibility! !!SCIAbstractLoadSpec methodsFor: 'testing' stamp: 'fn 1/16/2016 16:03'!testClasses	^ #()! !!SCIAbstractLoadSpec methodsFor: 'testing' stamp: 'fniep 1/10/2016 23:47'!isComplete	^ false! !!SCIAbstractLoadSpec methodsFor: 'testing' stamp: 'fn 1/16/2016 21:06'!prepareForCI	self subclassResponsibility! !!SCIAbstractLoadSpec methodsFor: 'testing' stamp: 'EstebanLorenzano 1/26/2016 17:36'!isPlatformCompatible	^ self platforms includes: SmalltalkCI platformClass platformSymbol! !SCIAbstractLoadSpec subclass: #SCIMetacelloLoadSpec	instanceVariableNames: 'baseline configuration directory load platforms repository originalAuthor'	classVariableNames: ''	poolDictionaries: ''	category: 'SmalltalkCI-Core'!!SCIMetacelloLoadSpec methodsFor: 'loading' stamp: 'fniep 1/10/2016 18:19'!determineRepository	self repository		ifNil: [ ^ 'filetree://', self projectDirectory, '/', self directory ].	^ self repository! !!SCIMetacelloLoadSpec methodsFor: 'loading' stamp: 'fniep 1/11/2016 00:41'!execute	(Smalltalk at: #Metacello) new		repository: self determineRepository;		baseline: self baseline;		configuration: self configuration;		load: self load.! !!SCIMetacelloLoadSpec methodsFor: 'installing' stamp: 'fn 1/10/2016 11:52'!installMetacelloOnPharo  (Smalltalk at: #Metacello) new    baseline: 'Metacello';    repository: 'github://dalehenrich/metacello-work:master/repository';    get.  (Smalltalk at: #Metacello) new    baseline: 'Metacello';    repository: 'github://dalehenrich/metacello-work:master/repository';    onConflict: [:ex | ex allow];    load! !!SCIMetacelloLoadSpec methodsFor: 'installing' stamp: 'fniep 1/10/2016 12:37'!filetreeInstalled	| organizer |	Smalltalk at: #PackageOrganizer ifPresent: [ :o | organizer := o ].	Smalltalk at: #RPackageOrganizer ifPresent: [ :o | organizer := o ].	organizer ifNil: [ self error: 'Unable to search for FileTree packages' ].	organizer default packageNamed: 'Metacello-FileTree' ifAbsent: [ ^ false ].	^ true! !!SCIMetacelloLoadSpec methodsFor: 'installing' stamp: 'fn 1/10/2016 11:52'!installMetacelloOnGemStone  (Smalltalk at: #Gofer) new    package: 'GsUpgrader-Core';    url: 'http://ss3.gemtalksystems.com/ss/gsUpgrader';    load.  (Smalltalk at: #GsUpgrader) upgradeMetacello.! !!SCIMetacelloLoadSpec methodsFor: 'installing' stamp: 'fniep 1/10/2016 18:20'!dependenciesInstalled	(Smalltalk includesKey: #Metacello)		ifFalse: [ ^ false ].	((self determineRepository beginsWith: 'filetree://') or:			[ (self determineRepository beginsWith: 'github//') ])		ifTrue: [ self filetreeInstalled ifFalse: [ ^ false ] ].	^ true! !!SCIMetacelloLoadSpec methodsFor: 'installing' stamp: 'fn 1/23/2016 00:44'!installDependencies	((Smalltalk at: #SmalltalkCISpec) platformSymbol = #squeak)		ifTrue: [ self installMetacelloOnSqueak ].	((Smalltalk at: #SmalltalkCISpec) platformSymbol = #pharo)		ifTrue: [ self installMetacelloOnPharo ].	((Smalltalk at: #SmalltalkCISpec) platformSymbol = #gemstone)		ifTrue: [ self installMetacelloOnGemStone ]! !!SCIMetacelloLoadSpec methodsFor: 'installing' stamp: 'fn 1/23/2016 00:44'!installMetacelloOnSqueak  "Get the Metacello configuration (for Squeak users)"  (Smalltalk at: #Installer) gemsource      project: 'metacello';      addPackage: 'ConfigurationOfMetacello';      install.  "Bootstrap Metacello Preview, using mcz files (#'previewBootstrap' symbolic version"  ((Smalltalk at: #ConfigurationOfMetacello) project    version: #'previewBootstrap') load.  "Load the Preview version of Metacello from GitHub"  (Smalltalk at: #Metacello) new    configuration: 'MetacelloPreview';    version: #stable;    repository: 'github://dalehenrich/metacello-work:configuration';    load.  "Now load latest version of Metacello"  (Smalltalk at: #Metacello) new    baseline: 'Metacello';    repository: 'github://dalehenrich/metacello-work:master/repository';    get.  (Smalltalk at: #Metacello) new    baseline: 'Metacello';    repository: 'github://dalehenrich/metacello-work:master/repository';    load! !!SCIMetacelloLoadSpec methodsFor: 'testing' stamp: 'fn 1/16/2016 16:07'!testClasses	self baseline ifNotNil: [ :b |		^ self getTestClassesForMetacelloProjectRegistration: b ].	self category ifNotNil: [ :c |		^ self getTestClassesForMetacelloProjectRegistration: c ].	^ #()! !!SCIMetacelloLoadSpec methodsFor: 'testing' stamp: 'fn 1/16/2016 21:09'!prepareForCI	(Smalltalk at: #MetacelloPlatform) current authorName: 'travisCI'.! !!SCIMetacelloLoadSpec methodsFor: 'testing' stamp: 'fn 1/16/2016 16:27'!getTestClassesForMetacelloProjectRegistration: aClassName	Smalltalk at: #'MetacelloProjectRegistration' ifPresent: [ :mpr |		^ (mpr registrationForClassNamed: aClassName				ifAbsent: [ self error: aClassName printString , ' not registered (loaded)' ])			currentlyLoadedClassesInProject select: [ :cl | cl inheritsFrom: TestCase ] ].	^ #()! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/10/2016 18:27'!load	^ load ifNil: [ load := #() ]! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:46'!load: required	load := required! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!baseline	^ baseline! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!baseline: aBaseline	baseline := aBaseline! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/10/2016 17:54'!directory: aDirectory	directory := aDirectory! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!repository	^ repository! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!repository: aRepository	repository := aRepository! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:44'!configuration: aConfiguration	configuration := aConfiguration! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/11/2016 02:41'!isComplete	self platforms isEmpty		ifTrue: [ ^ false ].	(self baseline isNil and: [ self configuration isNil ])		ifTrue: [ ^ false ].	^ true! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/11/2016 02:39'!platforms	^ platforms ifNil: [ platforms := OrderedCollection new ]! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fn 1/10/2016 11:45'!configuration	^ configuration! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/10/2016 17:54'!directory	^ directory! !!SCIMetacelloLoadSpec methodsFor: 'accessing' stamp: 'fniep 1/11/2016 02:39'!platforms: platformCollection	platforms := platformCollection! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SCIMetacelloLoadSpec class	instanceVariableNames: ''!!SCIMetacelloLoadSpec class methodsFor: 'as yet unclassified' stamp: 'fn 1/19/2016 17:52'!alias	^ #Metacello! !!SCIMetacelloLoadSpec class methodsFor: 'as yet unclassified' stamp: 'EstebanLorenzano 1/26/2016 18:40'!stonName	^ #MetacelloSpec! !Object subclass: #SmalltalkCI	instanceVariableNames: 'spec projectDirectory'	classVariableNames: ''	poolDictionaries: ''	category: 'SmalltalkCI-Core'!!SmalltalkCI methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 17:01'!runCI	self prepareForCI.	self loadProject.	self testProject! !!SmalltalkCI methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 17:07'!loadProject	"Install all specs for the current platform"	self compatibleSpecs do: [ :each |		each loadProject: self projectDirectory ]! !!SmalltalkCI methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 17:07'!prepareForCI	self compatibleSpecs do: [ :each | each prepareForCI ]	! !!SmalltalkCI methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 17:02'!finishUpAfterCI! !!SmalltalkCI methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 16:57'!testProject	self subclassResponsibility! !!SmalltalkCI methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 16:24'!runCIFor: aFilename	self requireSTON.	self readSTONSpec: aFilename.	self runCI.! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 15:58'!isSTONInstalled 	^ Smalltalk includesKey: #STON! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 15:58'!requireSTON	self isSTONInstalled ifTrue: [ ^ self ].    		self installSTON.	self isSTONInstalled 		ifFalse: [ self error: 'STON could not be loaded.' ]! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 15:58'!installSTON	^ self subclassResponsibility! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 16:05'!installDependencies	^ self subclassResponsibility! !!SmalltalkCI methodsFor: 'private' stamp: 'EstebanLorenzano 1/26/2016 16:15'!readSTONSpec: aFilename	^ self subclassResponsibility! !!SmalltalkCI methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 16:20'!projectDirectory	^ projectDirectory! !!SmalltalkCI methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 17:44'!classesToTest	| classes  |		((spec testing includesKey: #categories) 		or: [ spec testing includesKey: #classes ])		ifTrue: [ ^ self classesToTestFrom: spec testing ].	classes := Set new.	self compatibleSpecs 		do: [ :each | classes addAll: each testClasses ].		spec testing 		at: #include 		ifPresent: [ :includeDict |			classes addAll: (self classesToTestFrom: includeDict) ].		self testing 		at: #exclude 		ifPresent: [ :excludeDict |			classes removeAll: (self classesToTestFrom: excludeDict) ].		^ classes! !!SmalltalkCI methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 17:46'!classesToTestFrom: aDictionary	self subclassResponsibility! !!SmalltalkCI methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 17:06'!compatibleSpecs 	^ spec loading select: [ :aSpec | aSpec isPlatformCompatible ]! !!SmalltalkCI methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 16:20'!spec	^ spec! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmalltalkCI class	instanceVariableNames: ''!!SmalltalkCI class methodsFor: 'instance creation' stamp: 'EstebanLorenzano 1/26/2016 15:53'!new	self error: 'Use #uniqueInstance'! !!SmalltalkCI class methodsFor: 'executing' stamp: 'EstebanLorenzano 1/26/2016 17:36'!runCIFor: aFilenameString	^ self platformClass basicNew 		initialize;		runCIFor: aFilenameString! !!SmalltalkCI class methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 17:36'!platformSymbol	^ self subclassResponsibility! !!SmalltalkCI class methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 17:36'!platformClass	^ SmalltalkCIPharo! !!SmalltalkCI class methodsFor: 'helpers' stamp: 'EstebanLorenzano 1/26/2016 17:05'!runsHeadless	^ self subclassResponsibility ! !Object subclass: #SmalltalkCISpec	instanceVariableNames: 'loading testing originalAuthor'	classVariableNames: ''	poolDictionaries: ''	category: 'SmalltalkCI-Core'!!SmalltalkCISpec methodsFor: 'accessing' stamp: 'fn 1/19/2016 18:19'!loading: loadSpecifications	loading := loadSpecifications! !!SmalltalkCISpec methodsFor: 'accessing' stamp: 'EstebanLorenzano 1/26/2016 17:41'!addLoadSpec: aLoadSpec	aLoadSpec isComplete ifTrue: [ self loading add: aLoadSpec ]! !!SmalltalkCISpec methodsFor: 'accessing' stamp: 'fniep 1/12/2016 22:15'!testing	^ testing ifNil: [ testing := Dictionary new ]! !!SmalltalkCISpec methodsFor: 'accessing' stamp: 'fniep 1/12/2016 22:15'!testing: aDictionary	testing := aDictionary! !!SmalltalkCISpec methodsFor: 'accessing' stamp: 'fn 1/19/2016 18:24'!loading	^ loading ifNil: [ loading := OrderedCollection new ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmalltalkCISpec class	instanceVariableNames: ''!!SmalltalkCISpec class methodsFor: 'installing' stamp: 'fniep 1/11/2016 01:30'!installSTON	self stonInstalled ifFalse: [		Smalltalk at: #Installer ifPresent: [ :installer |    			[ installer squeaksource3      			project: 'STON';      			addPackage: 'STON-Core';      			install ] on: Warning do: [ :x | x resume ] ] ].	self stonInstalled ifFalse: [		Smalltalk at: #Gofer ifPresent: [ :gofer |    			[ gofer new      			url: 'http://ss3.gemstone.com/ss/STON';      			package: 'STON-Core';      			load ] on: Warning do: [ :x | x resume ] ] ].	self stonInstalled ifFalse: [		Smalltalk at: #Metacello ifPresent: [ :metacello |    			[ metacello new      			configuration: 'STON';      			version: #stable;      			repository: 'http://ss3.gemstone.com/ss/STON';      			load ] on: Warning do: [ :x | x resume ] ] ]! !!SmalltalkCISpec class methodsFor: 'instance creation' stamp: 'EstebanLorenzano 1/26/2016 16:20'!fromStream: aStream	^ STON fromStream: aStream  	! !!SmalltalkCISpec class methodsFor: 'instance creation' stamp: 'fniep 1/11/2016 00:23'!loadFromSTONFile: aFilenameString	(self fromSTONFile: aFilenameString) loadProject! !!SmalltalkCISpec class methodsFor: 'as yet unclassified' stamp: 'EstebanLorenzano 1/26/2016 18:40'!stonName	^ #ProjectSpec! !!SmalltalkCISpec class methodsFor: 'helpers' stamp: 'fn 1/24/2016 15:22'!classesInCategoryPrefix: aCategoryPrefix	| classes |	classes := Set new.	(Smalltalk organization categories		select: [ :category | category beginsWith: aCategoryPrefix ])			do: [ :category |				classes addAll: (self classesInCategory: category) ].	^ classes! !!SmalltalkCISpec class methodsFor: 'helpers' stamp: 'fn 1/24/2016 14:25'!classesInCategory: aCategory	^ (Smalltalk organization listAtCategoryNamed: aCategory) collect: [ :className | Smalltalk at: className ]! !!SmalltalkCISpec class methodsFor: 'helpers' stamp: 'fn 1/12/2016 22:31'!platformSymbol	| versionString |  	Smalltalk at: #'SystemVersion'    		ifPresent: [ :cl |      		versionString := cl current version.      		(versionString beginsWith: 'Pharo')        			ifTrue: [ ^ #'pharo' ].      		(versionString beginsWith: 'Squeak')        			ifTrue: [ ^ #'squeak' ].      		self error: 'Unrecognized version of Squeak/Pharo: ' , versionString ].  	^ #'gemstone'! !!SmalltalkCISpec class methodsFor: 'helpers' stamp: 'fn 1/13/2016 00:00'!runsHeadless	self platformSymbol = #squeak		ifTrue: [ ^ Smalltalk vm options includesAnyOf: #('-headless' '-nodisplay') ].	self platformSymbol = #pharo		ifTrue: [ ^ Smalltalk vm options includes: '--headless' ].	self platformSymbol = #gemstone		ifTrue: [ ^ true ].	^ false! !